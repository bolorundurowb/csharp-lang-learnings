using System.Text;
using Microsoft.CodeAnalysis;

namespace JsonSerializerSourceGenerator;

public static class SourceGenerationHelpers
{
    public const string ObjectLevelAttribute = """
                                               namespace JsonSerializerGenerators;
                                               [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
                                               public class SourceJsonSerializableAttribute : Attribute { }
                                               """;

    public const string FieldLevelAttribute = """
                                              namespace JsonSerializerGenerators;
                                              [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
                                              public class SourceJsonIgnoreFieldAttribute : Attribute { }
                                              """;

    public static string GeneratePartialClass(INamedTypeSymbol classSymbol, Compilation compilation)
    {
        var className = classSymbol.Name;
        var classNamespace = classSymbol.ContainingNamespace.ToDisplayString();

        var eligibleMembers = classSymbol.GetMembers()
            .Where(m => !m.IsStatic && m.DeclaredAccessibility == Accessibility.Public)
            .Where(m => m.Kind is SymbolKind.Property or SymbolKind.Field)
            .Where(m => !m.GetAttributes().Any(ad => ad.AttributeClass?.Name == "SourceJsonIgnoreFieldAttribute"))
            .ToList();

        var jsonBuilder = new StringBuilder();
        jsonBuilder.AppendLine("{");

        for (var i = 0; i < eligibleMembers.Count; i++)
        {
            var member = eligibleMembers[i];
            var memberType = member is IPropertySymbol property ? property.Type : ((IFieldSymbol)member).Type;
            var memberName = member.Name;

            jsonBuilder.AppendLine();

            switch (memberType.SpecialType)
            {
                case SpecialType.System_String:
                    jsonBuilder.Append(
                        $$"""
                          "{{memberName}}": $"{this.{{memberName}}}"
                          """
                    );
                    break;
                case SpecialType.System_DateTime:
                    jsonBuilder.Append(
                        $$"""
                          "{{memberName}}": {this.{{memberName}}.ToString("yyyy-MM-ddTHH:mm:ss.fffffffffZ")}
                          """
                    );
                    break;
                case SpecialType.System_Boolean:
                    jsonBuilder.Append(
                        $$"""
                          "{{memberName}}": {this.{{memberName}}.ToString().ToLowerInvariant()}
                          """
                    );
                    break;
                default:
                    jsonBuilder.Append(
                        $$"""
                          "{{memberName}}": {this.{{memberName}}}
                          """
                    );
                    break;
            }

            if (i < eligibleMembers.Count - 1)
            {
                jsonBuilder.Append(",");
            }
        }

        return $$"""
                       // <auto-generated />
                       namespace {{classNamespace}};
                       
                       public partial class {{className}}
                       {
                           public string ToJson() => {{jsonBuilder}};
                       }
                  """;
    }
}